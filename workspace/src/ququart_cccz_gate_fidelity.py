from itertools import product
import numpy as np
import sympy as sy

if False:
    ph_ex = sy.symbols(" ".join(f"phi{bin(k)[2:]:>04}" for k in range(16)), real=True)
    ph0, ph1 = sy.symbols("phi0 phi1", real=True)

    atom_states = ["G0", "G1", "C0", "C1"]
    CCCZ = sy.diag([
        sy.S(1) if ss.count("C1") == 0
        else sy.exp(sy.I * ph0) if ss.count("C1") == 1
        else sy.exp(sy.I * (2 * ph0 - sy.pi))
        for ss in product(atom_states, atom_states)
    ], unpack=True)
    G = sy.Matrix([
        [+1.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I],
        [+0.000000+0.000000*sy.I, +1.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I],
        [+0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.999932+0.011036*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I],
        [+0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, -0.667601+0.744514*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I],
        [+0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +1.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I],
        [+0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +1.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I],
        [+0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.999932+0.011036*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I],
        [+0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, -0.667601+0.744514*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I],
        [+0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.999932+0.011036*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I],
        [+0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.999932+0.011036*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I],
        [+0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.999742+0.022071*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I],
        [+0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, -0.676025+0.736866*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I],
        [+0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, -0.667601+0.744514*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I],
        [+0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, -0.667601+0.744514*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I],
        [+0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, -0.676025+0.736866*sy.I, +0.000000+0.000000*sy.I],
        [+0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.000000+0.000000*sy.I, +0.085631+0.996284*sy.I],
    ]).T

    expr = abs(sy.trace(CCCZ.H * G)) / 16
    dexpr = expr.diff(ph0)
    d2expr = dexpr.diff(ph0)
    print(expr.simplify())
    print()
    print(dexpr.simplify())
    print()
    print(d2expr.simplify())
    print()

if True:
    def F(phi0: float) -> float:
        return abs(
            0.678904539736056*np.sqrt(((-0.00709025408414992*np.exp(2*1j*phi0) + 0.0759395408005203*1j*np.exp(2*1j*phi0) - 0.338968173336916*np.exp(1j*phi0) - 0.378994337009159*1j*np.exp(1j*phi0) + 1 - 4.11652631845027e-18*1j)*np.exp(2*1j*phi0) + (-0.338968173336916 + 0.37899433700916*1j)*np.exp(1j*phi0) - 0.00709025408414992 - 0.0759395408005203*1j)*np.exp(-2*1j*phi0))
        )

    def dF(phi0: float) -> float:
        return abs(
            ((-0.0515556989949447*np.exp(1j*phi0) - 0.0048136056856115*1j*np.exp(1j*phi0) + 0.128650487964888 - 0.115063515852235*1j)*np.exp(3*1j*phi0) + (0.128650487964888 + 0.115063515852235*1j)*np.exp(1j*phi0) - 0.0515556989949447 + 0.0048136056856115*1j)*np.exp(-2*1j*phi0)/np.sqrt(((-0.00709025408414992*np.exp(2*1j*phi0) + 0.0759395408005203*1j*np.exp(2*1j*phi0) - 0.338968173336916*np.exp(1j*phi0) - 0.378994337009159*1j*np.exp(1j*phi0) + 1 - 4.11652631845027e-18*1j)*np.exp(2*1j*phi0) + (-0.338968173336916 + 0.37899433700916*1j)*np.exp(1j*phi0) - 0.00709025408414992 - 0.0759395408005203*1j)*np.exp(-2*1j*phi0))
        )

    def d2F(phi0: float) -> float:
        return abs(
            np.sqrt(((-0.00709025408414992*np.exp(2*1j*phi0) + 0.0759395408005203*1j*np.exp(2*1j*phi0) - 0.338968173336916*np.exp(1j*phi0) - 0.378994337009159*1j*np.exp(1j*phi0) + 1 - 4.11652631845027e-18*1j)*np.exp(2*1j*phi0) + (-0.338968173336916 + 0.37899433700916*1j)*np.exp(1j*phi0) - 0.00709025408414992 - 0.0759395408005203*1j)*np.exp(-2*1j*phi0))*(((0.00962721137122299*np.exp(1j*phi0) - 0.103111397989889*1j*np.exp(1j*phi0) + 0.115063515852235 + 0.128650487964888*1j)*np.exp(3*1j*phi0) + (0.115063515852235 - 0.128650487964888*1j)*np.exp(1j*phi0) + 0.00962721137122299 + 0.103111397989889*1j)*((-0.00709025408414992*np.exp(2*1j*phi0) + 0.0759395408005203*1j*np.exp(2*1j*phi0) - 0.338968173336916*np.exp(1j*phi0) - 0.378994337009159*1j*np.exp(1j*phi0) + 1 - 4.11652631845027e-18*1j)*np.exp(2*1j*phi0) + (-0.338968173336916 + 0.37899433700916*1j)*np.exp(1j*phi0) - 0.00709025408414992 - 0.0759395408005203*1j) - 0.0243789031960787*((0.400742350926921*np.exp(1j*phi0) + 0.0374161479039649*1j*np.exp(1j*phi0) - 1.0 + 0.894388491426782*1j)*np.exp(3*1j*phi0) - (1 + 0.894388491426782*1j)*np.exp(1j*phi0) + 0.400742350926921 - 0.0374161479039649*1j)**2)/((-0.00709025408414992*np.exp(2*1j*phi0) + 0.0759395408005203*1j*np.exp(2*1j*phi0) - 0.338968173336916*np.exp(1j*phi0) - 0.378994337009159*1j*np.exp(1j*phi0) + 1 - 4.11652631845027e-18*1j)*np.exp(2*1j*phi0) + (-0.338968173336916 + 0.37899433700916*1j)*np.exp(1j*phi0) - 0.00709025408414992 - 0.0759395408005203*1j)**2
        )

    def newton_raphson(
        phi0_init: float,
        maxiters: int,
        epsilon: float,
    ) -> float:
        phi0 = phi0_init
        for _ in range(maxiters):
            dphi0 = -dF(phi0) / d2F(phi0)
            if abs(dphi0) < epsilon:
                return phi0
            phi0 += dphi0
            phi0 = phi0 % (2 * np.pi)
        print("reached maxiters")
        return phi0

    phi0_init = +2.301782
    sol = newton_raphson(phi0_init, maxiters=1000, epsilon=1e-6)
    print(
f"""
phi0 = {sol:.6f}
F = {F(sol):.6f}
dF = {dF(sol):.6f}
d2F = {d2F(sol):.6f}
"""[1:-1]
    )

