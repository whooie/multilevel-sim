from itertools import product
from pathlib import Path
import numpy as np
import whooie.pyplotdefs as pd

datadir = Path("output").joinpath("time_bin")
data = np.load(str(datadir.joinpath("reg2.npz")))
rho = data["rho"]

atom_states = [
    "C0",
    "C1",
    "T0",
    "T1",
    "T2",
    "T3",
]
early_states = [
    0,
    1,
    2,
    3,
]
late_states = [
    0,
    1,
    2,
    3,
]
photon_states = list(product(early_states, late_states))
states = list(product(atom_states, early_states, late_states))

rho_final = rho[:, :, -1]

rho_atom = sum(
    (
        Tn := np.kron(
            np.eye(len(atom_states)),
            np.array([[1.0] if k == p else [0.0] for k in photon_states]),
        )
    ).T @ rho_final @ Tn
    for p in photon_states
)
atom_purity = np.diag(rho_atom @ rho_atom).sum().real

rho_photons = sum(
    (
        Tn := np.kron(
            np.array([[1.0] if k == a else [0.0] for k in atom_states]),
            np.eye(len(photon_states)),
        )
    ).T @ rho_final @ Tn
    for a in atom_states
)
photons_purity = np.diag(rho_photons @ rho_photons).sum().real

print(f"final photons purity = {photons_purity}")

probs = np.diag(rho_photons).real

np.savez(
    str(datadir.joinpath("final.npz")),
    rho=rho_final,
    rho_atom=rho_atom,
    rho_photons=rho_photons,
)

(
    pd.Plotter()
    .bar(
        list(range(len(photon_states))), probs,
        width=1.0,
        edgecolor="k",
        linewidth=0.5,
    )
    .semilogy([], [])
    .set_xticks(
        list(range(len(photon_states))),
        [
            f"${state[0]}_\\mathregular{{E}}, {state[1]}_\\mathregular{{L}}$"
            for state in photon_states
        ],
        rotation=45.0,
        ha="right",
        fontsize="x-small",
    )
    .tick_params(axis="x", pad=0.1)
    .set_xlabel("Photon state")
    .set_ylabel("Probability")
    .savefig(datadir.joinpath("time_bin_photon_states.png"))
)

